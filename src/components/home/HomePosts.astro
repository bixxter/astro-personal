---
interface Post {
  data: {
    title: string;
    date: string;
    img?: string;
  };
  slug: string;
}

interface PostsFormatted extends Post {
  actualDate: Date;
}

interface Props {
  posts: Post[];
}

const { posts }: Props = Astro.props;

const postByDate: Record<string, PostsFormatted[]> = {};

const sortedPosts = posts.sort((a, b) => {
  const dateA = new Date(a.data.date);
  const dateB = new Date(b.data.date);
  return dateB.getTime() - dateA.getTime();
});

const groupByYear = () => {
  sortedPosts.forEach((post) => {
    const actualDate = new Date(
      post.data.date.replace(/(\d{2}).(\d{2}).(\d{4})/, "$2/$1/$3"),
    );
    const year = actualDate.getFullYear().toString();
    const postExnteded = { ...post, actualDate };

    if (!postByDate[year]) {
      postByDate[year] = [];
    }

    postByDate[year].push(postExnteded);
  });
};

groupByYear();
---

<ul>
  {
    Object.keys(postByDate).map((year) => (
      <li class="list-inside">
        <h2 class="text-3xl opacity-30">{year}</h2>

        <ul>
          {postByDate[year].map((post) => (
            <li>
              <span class="mr-2">~</span>
              <a class="text-gradient" href={`/blog/${post.slug}`}>
                {post.data.title}
              </a>

              <span class="text-xs italic text-gray-400">
                {post.actualDate.toLocaleDateString("en-US", {
                  month: "long",
                  day: "numeric",
                })}
              </span>
            </li>
          ))}
        </ul>
      </li>
    ))
  }
</ul>
